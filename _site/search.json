[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chess-Project-Final",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Chess Project Final hehe.html",
    "href": "Chess Project Final hehe.html",
    "title": "Chess",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nLoading required package: scales\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: ggridges\n\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nRows: 20058 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): victory_status, winner, time_increment, white_id, black_id, moves,...\ndbl  (5): game_id, turns, white_rating, black_rating, opening_moves\nlgl  (1): rated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nchess %&gt;%\n  count(opening_code)\n\n# A tibble: 365 × 2\n   opening_code     n\n   &lt;chr&gt;        &lt;int&gt;\n 1 A00           1007\n 2 A01            164\n 3 A02             82\n 4 A03             78\n 5 A04            285\n 6 A05             16\n 7 A06            125\n 8 A07             33\n 9 A08             39\n10 A09             17\n# ℹ 355 more rows\n\nn_distinct(chess$opening_code)\n\n[1] 365\n\nchess_rated &lt;- chess %&gt;% \n  filter(rated == \"TRUE\")\n#listing openings to use\nopenings_of_interest &lt;- c(\n  \"Slav Defense\", \"English Opening\", \"Queen's Gambit\", \"Ruy Lopez\",\n  \"Italian Game\", \"Sicilian Defense\", \"Nimzo-Larsen Attack\",\n  \"Scandinavian Defense\", \"French Defense\", \"Mieses Opening\"\n)\n\n#ensuring all openings containing these names are used (since there are variations)\npattern &lt;- paste(openings_of_interest, collapse = \"|\")\nfiltered_games &lt;- chess_rated %&gt;%\n  filter(str_detect(opening_shortname, pattern)) %&gt;%         # keep games with matching openings\n  mutate(opening_shortname = case_when(\n    str_detect(opening_shortname, \"Nimzo-Larsen Attack\") ~ \"Nimzo-Larsen Attack\",\n    str_detect(opening_shortname, \"Slav Defense\") ~ \"Slav Defense\",\n    str_detect(opening_shortname, \"Sicilian Defense\") ~ \"Sicilian Defense\",\n    str_detect(opening_shortname, \"English Opening\") ~ \"English Opening\",\n    str_detect(opening_shortname, \"Queen's Gambit\") ~ \"Queen's Gambit\",\n    str_detect(opening_shortname, \"Ruy Lopez\") ~ \"Ruy Lopez\",\n    str_detect(opening_shortname, \"Italian Game\") ~ \"Italian Game\",\n    str_detect(opening_shortname, \"Scandinavian Defense\") ~ \"Scandinavian Defense\",\n    str_detect(opening_shortname, \"French Defense\") ~ \"French Defense\",\n    str_detect(opening_shortname, \"Mieses Opening\") ~ \"Mieses Opening\",\n    TRUE ~ \"Other\"  \n  ))\n\n#summarizing win percentages into a model\nwin_summary &lt;- filtered_games %&gt;%\n  filter(winner %in% c(\"White\", \"Black\")) %&gt;%\n  group_by(opening_shortname, winner) %&gt;%\n  summarize(wins = n(), .groups = \"drop\") %&gt;%\n  group_by(opening_shortname) %&gt;%\n  mutate(total_games = sum(wins),\n         win_percentage = wins / total_games * 100)\nprint(win_summary)\n\n# A tibble: 20 × 5\n# Groups:   opening_shortname [10]\n   opening_shortname    winner  wins total_games win_percentage\n   &lt;chr&gt;                &lt;chr&gt;  &lt;int&gt;       &lt;int&gt;          &lt;dbl&gt;\n 1 English Opening      Black    226         540           41.9\n 2 English Opening      White    314         540           58.1\n 3 French Defense       Black    552        1151           48.0\n 4 French Defense       White    599        1151           52.0\n 5 Italian Game         Black    376         769           48.9\n 6 Italian Game         White    393         769           51.1\n 7 Mieses Opening       Black     52          86           60.5\n 8 Mieses Opening       White     34          86           39.5\n 9 Nimzo-Larsen Attack  Black     66         129           51.2\n10 Nimzo-Larsen Attack  White     63         129           48.8\n11 Queen's Gambit       Black    312         738           42.3\n12 Queen's Gambit       White    426         738           57.7\n13 Ruy Lopez            Black    293         632           46.4\n14 Ruy Lopez            White    339         632           53.6\n15 Scandinavian Defense Black    272         563           48.3\n16 Scandinavian Defense White    291         563           51.7\n17 Sicilian Defense     Black   1061        2030           52.3\n18 Sicilian Defense     White    969        2030           47.7\n19 Slav Defense         Black    139         271           51.3\n20 Slav Defense         White    132         271           48.7\n\n#visualization of win color by opening chosen\nggplot(win_summary, aes(x = opening_shortname, y = win_percentage, fill = winner)) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Opening Name\", y = \"Win Percentage\", fill = \"Winner Color\",\n       title = \"Win Percentage by Opening and Color\") +\n  scale_fill_viridis_d() +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n#summary stats for the average turn count based on win condition  \nturns_summary &lt;- filtered_games %&gt;%\n  group_by(victory_status) %&gt;%\n  summarize(\n    avg_turns = mean(turns, na.rm = TRUE),   # Average turns\n    median_turns = median(turns, na.rm = TRUE),   # Median turns\n    sd_turns = sd(turns, na.rm = TRUE),   # Standard deviation\n    min_turns = min(turns, na.rm = TRUE),   # Minimum turns\n    max_turns = max(turns, na.rm = TRUE),   # Maximum turns\n    n = n(),   # Number of games (for each victory status)\n    .groups = \"drop\"\n  )"
  },
  {
    "objectID": "Chess Project Final hehe.html#data-description",
    "href": "Chess Project Final hehe.html#data-description",
    "title": "Chess",
    "section": "Data Description",
    "text": "Data Description\n\nThe source of my data was the online database Kaggle.\nThe data set contains many variables dealing with chess games, such as which color won, how the victory was secured, whether the game was ranked or casual, the username of each color, the format of the game (rapid, blitz, bullet variations), the move order, the opening name and its respective ID code, the opening variation (exchange, two-knights, Smith-Morra, etc.), and finally the number of opening moves in the game (before the opening variations’ respective theory was over).\nI want to answer a few questions based off of this data. I want to determine which color is more likely to win first and foremost. This will be rather easy to answer, and so I wish to also dive deeper in answering which color is most likely to win based on different opening variations. This question may be more challenging to answer because there are many different chess openings. In fact there are 365 unique openings within this data set! This may be too much to analyze, so I think analyzing just the top 10 most popular openings would be sufficient. Another question I would like to answer is the percentage of games decided by checkmate based off of different factors, such as opening variation, color, and/or time increment format. I may come up with more questions as I work with the data set because it is rather dense!"
  },
  {
    "objectID": "Chess Project Final hehe.html#data-visualization",
    "href": "Chess Project Final hehe.html#data-visualization",
    "title": "Chess",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nI want to create various plots such as violin plots which will show the amount of wins based on color for the top 10 openings I will be analyzing. To do this I will need to change the data around a little bit like mutating the names of the opening_code variable to display the unique opening name instead of the code name. I also wish to create boxplots/violin plots to show things like win percentage based on the time format for each respective color. Theory will say that white has a better chance of winning each game. This is typically because white moves first, and has the initial say of how the game will be played. Black’s usual goal in chess is to defend the attack by white, and counter by either drawing the game or winning. With this in mind, it will be assumed that white should have a higher winning percentage.\nI ultimately wish to create visualizations that have unique colors assigned to each opening choice. This will help create a strong visual that is easy to understand. I can also color code certain plots to be either white or black to represent the respective color for each player.\nI will need to change some variable names to make it easier to write the code. When creating the plots, I will also need to change the respective codes of the top 10 opening choices from things like “A10” or “B20” to their respective opening name, which will be rather simple as the opening code is attached to the opening name in another column called “opening_shortname.”"
  },
  {
    "objectID": "Chess Project Final hehe.html#data-cleaning",
    "href": "Chess Project Final hehe.html#data-cleaning",
    "title": "Chess",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nDo you need to reformat any variables into different types (e.g. factors, time, dates, strings)? Or remove information from variable values? Yes\nDo you need to deal with any missing data, especially missing data coded other than NA? Yes\nDo you need to filter your data? How? No\nDo you need to create any new variables? What variables? How? No\nDo you need to add new data (join) to your data? What data? How? No\nAre there any variables you can exclude from your data? Yes\nDo you need pivot your data in any way? Why? How? No\nDo you need to summarize any of the variables? Which ones? How? Yes, but mostly just explaining what they mean because not everybody understands chess. I may need to include graphics of what each opening may look like at its core (like the English, Spanish, Nimzo-Larsen, etc.)\nWhat other aspects of your data need to be “fixed” in order to make your data visualizations? I am not quite sure yet, but once I start the process I will likely discover issues with code. For now, it does not appear that I need to make any changes."
  }
]